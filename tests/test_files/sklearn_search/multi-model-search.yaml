description: BayesSearchCV using ClassifierSearchSpace
cross_validation_type: <class 'skopt.searchcv.BayesSearchCV'>
higher_score_is_better: true
number_of_splits: 3
score_names:
- roc_auc
parameter_names:
- model
- model__max_depth
- model__n_estimators
- model__learning_rate
- model__colsample_bytree
- model__subsample
- model__C
- prep__numeric__imputer__transformer
- prep__numeric__scaler__transformer
- prep__non_numeric__encoder__transformer
parameter_names_mapping:
  model: model
  model__max_depth: max_depth
  model__n_estimators: n_estimators
  model__learning_rate: learning_rate
  model__colsample_bytree: colsample_bytree
  model__subsample: subsample
  model__C: C
  prep__numeric__imputer__transformer: imputer
  prep__numeric__scaler__transformer: scaler
  prep__non_numeric__encoder__transformer: encoder
test_score_rankings:
  roc_auc:
  - 10
  - 3
  - 9
  - 5
  - 8
  - 1
  - 4
  - 7
  - 6
  - 2
test_score_averages:
  roc_auc:
  - 0.6953237481028642
  - 0.749528698607775
  - 0.7129896549012247
  - 0.7249956464718301
  - 0.7201128636750904
  - 0.7572841788723951
  - 0.7398009194420251
  - 0.7206637158626356
  - 0.7219459110293337
  - 0.7524516660481084
test_score_standard_deviations:
  roc_auc:
  - 0.006550389860273028
  - 0.003310917498753688
  - 0.02737822905053269
  - 0.013145136693474854
  - 0.012794808840259282
  - 0.015832681177252183
  - 0.02683802066055745
  - 0.030061507882577092
  - 0.03566029814318316
  - 0.027241897747693224
trials:
- model: XGBClassifier(...)
  model__colsample_bytree: 0.8844821246070537
  model__learning_rate: 0.09798893186641074
  model__max_depth: 10
  model__n_estimators: 871
  model__subsample: 0.15608164675966435
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.9195352964526833
  model__learning_rate: 0.04040915598028404
  model__max_depth: 6
  model__n_estimators: 229
  model__subsample: 0.5082988094256691
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.1801528457825951
  model__learning_rate: 0.18343365247851712
  model__max_depth: 9
  model__n_estimators: 547
  model__subsample: 0.18590953529349413
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.44364889457651413
  model__learning_rate: 0.16271986876703082
  model__max_depth: 8
  model__n_estimators: 909
  model__subsample: 0.7453280360438532
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.9399760402267441
  model__learning_rate: 0.05744608180517957
  model__max_depth: 4
  model__n_estimators: 810
  model__subsample: 0.43532180018493205
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 1.5955669452672732
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 22.91257035436645
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.402690660245868
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 3.4885114865499216
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.0007376531147826206
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
timings:
  fit time averages:
  - 0.581342617670695
  - 0.3814559777577718
  - 0.20096882184346518
  - 0.7342596848805746
  - 0.8645796775817871
  - 0.04771200815836588
  - 0.13607199986775717
  - 0.15902129809061685
  - 0.08973805109659831
  - 0.023728609085083008
  fit time standard deviations:
  - 0.00526128219389703
  - 0.0006885780168875293
  - 0.0011254671582607255
  - 0.02898779143978948
  - 0.007600470813750371
  - 0.002407373933953263
  - 0.03570320825269794
  - 0.015402920346444932
  - 0.006857292013939244
  - 0.004937331109455821
  score time averages:
  - 0.01622947057088216
  - 0.013127962748209635
  - 0.028509775797526043
  - 0.01682599385579427
  - 0.014706293741861979
  - 0.01102010409037272
  - 0.024724960327148438
  - 0.02668603261311849
  - 0.021968285242716473
  - 0.011111259460449219
  score time standard deviations:
  - 0.00029551020843784025
  - 0.0002334654276340452
  - 4.8494336384444246e-05
  - 0.00035333131127927825
  - 0.0003032926941942966
  - 0.0014183421456193856
  - 0.007537203895614672
  - 0.004071331140022464
  - 0.00032827692072402004
  - 0.0019860667002960792
