description: BayesSearchCV using ClassifierSearchSpace
cross_validation_type: <class 'skopt.searchcv.BayesSearchCV'>
higher_score_is_better: true
number_of_splits: 3
score_names:
- roc_auc
parameter_names:
- model
- model__max_depth
- model__learning_rate
- model__n_estimators
- model__min_child_weight
- model__subsample
- model__colsample_bytree
- model__colsample_bylevel
- model__reg_alpha
- model__reg_lambda
- model__C
- prep__numeric__imputer__transformer
- prep__numeric__scaler__transformer
- prep__non_numeric__encoder__transformer
parameter_names_mapping:
  model: model
  model__max_depth: max_depth
  model__learning_rate: learning_rate
  model__n_estimators: n_estimators
  model__min_child_weight: min_child_weight
  model__subsample: subsample
  model__colsample_bytree: colsample_bytree
  model__colsample_bylevel: colsample_bylevel
  model__reg_alpha: reg_alpha
  model__reg_lambda: reg_lambda
  model__C: C
  prep__numeric__imputer__transformer: imputer
  prep__numeric__scaler__transformer: scaler
  prep__non_numeric__encoder__transformer: encoder
test_score_rankings:
  roc_auc:
  - 8
  - 9
  - 6
  - 12
  - 10
  - 5
  - 2
  - 3
  - 11
  - 7
  - 4
  - 1
test_score_averages:
  roc_auc:
  - 0.7183888283755744
  - 0.7168138899817452
  - 0.7260753494685872
  - 0.6999267897579838
  - 0.7062537360612767
  - 0.729144286164393
  - 0.7603478446449657
  - 0.7524516660481084
  - 0.7029784509943559
  - 0.7228258005487223
  - 0.7395348887611041
  - 0.7650357120514085
test_score_standard_deviations:
  roc_auc:
  - 0.0027180378025144043
  - 0.021351104269894793
  - 0.007762749648129412
  - 0.010145228126219352
  - 0.012724837881966045
  - 0.013231565867482656
  - 0.015644327455357487
  - 0.027241897747693224
  - 0.015892927436002964
  - 0.015079771616225115
  - 0.02700178270268214
  - 0.015382103321788826
trials:
- model: XGBClassifier(...)
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.7190145932204617
  model__colsample_bytree: 0.7633101185638462
  model__learning_rate: 0.3578850597273058
  model__max_depth: 34
  model__min_child_weight: 17
  model__n_estimators: 356
  model__reg_alpha: 0.03991502512609639
  model__reg_lambda: 1.6314646082653332
  model__subsample: 0.8297131143495482
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.9696848688013859
  model__colsample_bytree: 0.5818035893192751
  model__learning_rate: 0.09429380335353854
  model__max_depth: 23
  model__min_child_weight: 4
  model__n_estimators: 396
  model__reg_alpha: 0.01377401781906964
  model__reg_lambda: 2.9702160489961873
  model__subsample: 0.7787136018188425
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.8876821894139413
  model__colsample_bytree: 0.679511465960702
  model__learning_rate: 0.43717521513769547
  model__max_depth: 10
  model__min_child_weight: 10
  model__n_estimators: 698
  model__reg_alpha: 0.004878994671461945
  model__reg_lambda: 2.765930623533157
  model__subsample: 0.8171497855716499
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.9600046132186582
  model__colsample_bytree: 0.7482333517983584
  model__learning_rate: 0.4188444528865573
  model__max_depth: 4
  model__min_child_weight: 1
  model__n_estimators: 553
  model__reg_alpha: 0.00012682484500023283
  model__reg_lambda: 1.7069954134453618
  model__subsample: 0.9129729782239605
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.8503107223106829
  model__colsample_bytree: 0.9358259642316076
  model__learning_rate: 0.20796896168096884
  model__max_depth: 4
  model__min_child_weight: 2
  model__n_estimators: 100
  model__reg_alpha: 0.003039078727520555
  model__reg_lambda: 2.27956386247516
  model__subsample: 0.5879532027938977
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.0007376531147826206
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.00028712123350695286
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 1.274865255061674e-06
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 23.32672808600529
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.13184996310179986
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
timings:
  fit time averages:
  - 0.18143129348754883
  - 0.10985128084818523
  - 0.20551300048828125
  - 0.23520557085673013
  - 0.49903178215026855
  - 0.07201838493347168
  - 0.01681995391845703
  - 0.01136620839436849
  - 0.01813062032063802
  - 0.020314534505208332
  - 0.023934364318847656
  - 0.0145570437113444
  fit time standard deviations:
  - 0.0015142047235456803
  - 0.001084171297819501
  - 0.007038898398196906
  - 0.008070646183421468
  - 0.014481314510855133
  - 0.0051450788146118875
  - 0.0015213761476426568
  - 0.0029817023550788705
  - 0.00024084228824957878
  - 0.0007704254372732127
  - 0.0028444856955835815
  - 0.001366569157299481
  score time averages:
  - 0.006795724232991536
  - 0.012010653813680014
  - 0.01387627919514974
  - 0.01259613037109375
  - 0.007788896560668945
  - 0.011271317799886068
  - 0.004731655120849609
  - 0.003981113433837891
  - 0.009325583775838217
  - 0.00979177157084147
  - 0.004176696141560872
  - 0.008926947911580404
  score time standard deviations:
  - 0.00010619566639077003
  - 0.00024692356912190555
  - 0.00026780037822263307
  - 6.0725481998506285e-05
  - 7.418764848530296e-05
  - 0.0004052570873597954
  - 7.318505444661053e-05
  - 0.0001228373304227031
  - 0.00016192493262877188
  - 0.00016053254059242032
  - 0.00021450291647670807
  - 0.004492306514081136
