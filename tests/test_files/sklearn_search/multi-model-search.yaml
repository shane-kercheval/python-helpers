description: BayesSearchCV using ClassifierSearchSpace
cross_validation_type: <class 'skopt.searchcv.BayesSearchCV'>
higher_score_is_better: true
number_of_splits: 3
score_names:
- roc_auc
parameter_names:
- model
- model__max_depth
- model__learning_rate
- model__n_estimators
- model__min_child_weight
- model__subsample
- model__colsample_bytree
- model__colsample_bylevel
- model__reg_alpha
- model__reg_lambda
- model__C
- prep__numeric__imputer__transformer
- prep__numeric__scaler__transformer
- prep__non_numeric__encoder__transformer
parameter_names_mapping:
  model: model
  model__max_depth: max_depth
  model__learning_rate: learning_rate
  model__n_estimators: n_estimators
  model__min_child_weight: min_child_weight
  model__subsample: subsample
  model__colsample_bytree: colsample_bytree
  model__colsample_bylevel: colsample_bylevel
  model__reg_alpha: reg_alpha
  model__reg_lambda: reg_lambda
  model__C: C
  prep__numeric__imputer__transformer: imputer
  prep__numeric__scaler__transformer: scaler
  prep__non_numeric__encoder__transformer: encoder
test_score_rankings:
  roc_auc:
  - 8
  - 9
  - 6
  - 12
  - 10
  - 5
  - 2
  - 3
  - 11
  - 7
  - 4
  - 1
test_score_averages:
  roc_auc:
  - 0.7183888283755744
  - 0.7168138899817452
  - 0.7260753494685872
  - 0.6999267897579838
  - 0.7062537360612767
  - 0.729144286164393
  - 0.7590218765217673
  - 0.7524516660481084
  - 0.7029784509943559
  - 0.7228258005487223
  - 0.7395348887611041
  - 0.7650357120514085
test_score_standard_deviations:
  roc_auc:
  - 0.0027180378025144043
  - 0.021351104269894793
  - 0.007762749648129412
  - 0.010145228126219352
  - 0.012724837881966045
  - 0.013231565867482656
  - 0.01861580270082367
  - 0.027241897747693224
  - 0.015892927436002964
  - 0.015079771616225115
  - 0.02700178270268214
  - 0.015382103321788826
trials:
- model: XGBClassifier(...)
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.7190145932204617
  model__colsample_bytree: 0.7633101185638462
  model__learning_rate: 0.3578850597273058
  model__max_depth: 34
  model__min_child_weight: 17
  model__n_estimators: 356
  model__reg_alpha: 0.03991502512609639
  model__reg_lambda: 1.6314646082653332
  model__subsample: 0.8297131143495482
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.9696848688013859
  model__colsample_bytree: 0.5818035893192751
  model__learning_rate: 0.09429380335353854
  model__max_depth: 23
  model__min_child_weight: 4
  model__n_estimators: 396
  model__reg_alpha: 0.01377401781906964
  model__reg_lambda: 2.9702160489961873
  model__subsample: 0.7787136018188425
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.8876821894139413
  model__colsample_bytree: 0.679511465960702
  model__learning_rate: 0.43717521513769547
  model__max_depth: 10
  model__min_child_weight: 10
  model__n_estimators: 698
  model__reg_alpha: 0.004878994671461945
  model__reg_lambda: 2.765930623533157
  model__subsample: 0.8171497855716499
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.9600046132186582
  model__colsample_bytree: 0.7482333517983584
  model__learning_rate: 0.4188444528865573
  model__max_depth: 4
  model__min_child_weight: 1
  model__n_estimators: 553
  model__reg_alpha: 0.00012682484500023283
  model__reg_lambda: 1.7069954134453618
  model__subsample: 0.9129729782239605
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bylevel: 0.8503107223106829
  model__colsample_bytree: 0.9358259642316076
  model__learning_rate: 0.20796896168096884
  model__max_depth: 4
  model__min_child_weight: 2
  model__n_estimators: 100
  model__reg_alpha: 0.003039078727520555
  model__reg_lambda: 2.27956386247516
  model__subsample: 0.5879532027938977
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 0.0007376531147826206
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.00028712123350695286
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 1.274865255061674e-06
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 23.32672808600529
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.13184996310179986
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
timings:
  fit time averages:
  - 0.19255431493123373
  - 0.11046997706095378
  - 0.2010523478190104
  - 0.21672995885213217
  - 0.47554222742716473
  - 0.0689232349395752
  - 0.02514163653055827
  - 0.00968011220296224
  - 0.01824792226155599
  - 0.018137057622273762
  - 0.02239569028218587
  - 0.011481682459513346
  fit time standard deviations:
  - 0.0008385504065088784
  - 0.0017141852854306303
  - 0.007215415195490896
  - 0.006721586925234354
  - 0.0010088103312122906
  - 0.0011627137563050298
  - 0.005345257130867668
  - 0.00028300237356543556
  - 0.0003390443156711984
  - 0.00019962933781894707
  - 0.0032132620048288805
  - 0.00021056462782614464
  score time averages:
  - 0.007881641387939453
  - 0.012277603149414062
  - 0.013665278752644857
  - 0.01276556650797526
  - 0.008066733678181967
  - 0.011844476064046225
  - 0.004866441090901692
  - 0.003993829091389974
  - 0.009325424830118815
  - 0.009344657262166342
  - 0.0038565794626871743
  - 0.003881374994913737
  score time standard deviations:
  - 0.0008299567054392254
  - 0.00023798171391212458
  - 0.0003218827026944024
  - 0.000630628163666644
  - 0.000274795751472247
  - 0.0006682043921622165
  - 0.0005038569402233705
  - 7.362061344919864e-05
  - 0.00010456429920052533
  - 5.3626104535493805e-05
  - 6.99035069994443e-05
  - 1.9587440199493607e-05
